.TH IMGFAC 1 "April 2011" "imgfac"

.SH NAME
imgfac - Create and customize OS images for private and public clouds.
This tool can be launched as a daemon to provide a QMFv2 interface that other applications can use for building images and instantiating these images on supported clouds.  Alternatively, a single image can be built or instantiated using the command line options described below without creating a daemon process or using QMF.

Currently supported public cloud services are: Amazon EC2, Rackspace.
Currently supported private cloud services: RHEV-M, KVM.

.SH SYNOPSIS
.B imgfac [-h] [--version] [-v] [--debug] [--foreground] [--config CONFIG]
.B          [imgdir IMGDIR] [--timeout TIMEOUT] [--qmf] [--qpidd QPIDD]
.B          [--image IMAGE]
.B          [--template TEMPLATE] [--target TARGET] [--target TARGET]...
.B          [--credentials CREDENTIALS] [--provider PROVIDER] [--provider PROVIDER]...
.B          [--warehouse WAREHOUSE]
.B          [--image_bucket IMAGE_BUCKET]
.B          [--build_bucket BUILD_BUCKET]
.B          [--target_bucket TARGET_BUCKET]
.B          [--template_bucket TEMPLATE_BUCKET]
.B          [--icicle_bucket ICICLE_BUCKET]
.B          [--provider_bucket PROVIDER_BUCKET]

.SH OPTIONS

.B -h, --help 
Display the help page.

.B --version
imgfac version info.

.B -v, --verbose
Set verbose logging.

.B --debug
Set really verbose logging for debugging.

.B --config CONFIG
Image factory configuration file to use.  (default: /etc/imagefactory.conf)

.B --imgdir IMGDIR
Build image files in location specified. After the image is finished it will be saved in this location.  (default: /tmp)

.B --image IMAGE
The UUID of the image to build or push. This is a UUID of an object in IWHD's image bucket.

.B --timeout TIMEOUT
Set the timeout period for image building in seconds.  (default: 3600)

.SS QMF agent:
  Provide a QMFv2 agent interface.

.B --foreground
Stay in the foreground and avoid launching a daemon. 
Launching in foreground allows the user to see what messages are being passed to QMF. For more detailed output use this parameter together with .B --debug.
If the parameter is not specified, the QMF agent will be started as a daemon.
(default: False)

.B --qmf
Turn on QMF agent interface.  (default: False)

.B --qpidd QPIDD
URL of qpidd to connect to.  (default: localhost)

.SS Image building:
  Build specified system and exit.

.B --template TEMPLATE
Template to build from. Template can be passed as URL, PATH, UUID or XML. Please refer to the 
.BR XML
.BR EXAMPLES
section at the bottom.

.B --target TARGET
The list of cloud services to target. Examples include ec2, rhevm, vsphere, rackspace, condorcloud and gogrid.


.SS Image pushing:
  Push an image and exit.


.B --provider PROVIDER
The list of cloud service providers to push the emacs. Examples include ec2-us-east-1, ec2-us-west-1, rackspace.

.B --credentials CREDENTIALS
Cloud provider credentials. Credentials must be passed as XML file. Please refer to the 
.BR XML 
.BR EXAMPLES 
section at the bottom.

.SS Image Warehouse:
  Options for specifying Image Warehouse base URL and bucket names.

.B --warehouse WAREHOUSE
URL of the warehouse location to store images.  (default: http://localhost:9090/)

.B --image_bucket IMAGE_BUCKET
Name of warehouse bucket to look in for images.  (default: None)

.B --build_bucket BUILD_BUCKET
Name of warehouse bucket to look in for builds.  (default: None)

.B --target_bucket TARGET_BUCKET
Name of warehouse bucket to look in for target images.  (default: None)

.B --template_bucket TEMPLATE_BUCKET
Name of warehouse bucket to look in for templates.  (default: None)

.B --icicle_bucket ICICLE_BUCKET
Name of warehouse bucket to look in for icicles.  (default: None)

.B --provider_bucket PROVIDER_BUCKET
Name of warehouse bucket to look in for provider image instances. (default: None)

.SH XML EXAMPLES
.sp
.SS CREDENTIALS

It's assumed that you will have more credentials in the same XML file, so the syntax will be .B cloud_provider = [XML string]
eg.

rackspace = "<provider_credentials> \\
        <rackspace_credentials> \\
            <username>foo</username> \\
            <api_key>0123456789</api_key> \\
        </rackspace_credentials> \\
    </provider_credentials>"

.SS TEMPLATE 
eg. a Windows 2008 64bit example

<template>
  <name>win2kjeos</name>
  <os>
    <name>Windows</name>
    <version>2008</version>
    <arch>x86_64</arch>
    <install type='iso'>
      <iso>http://directory_path/windows2008x64.iso</iso>
    </install>
    <key></key>
  </os>
  <description>Windows 2008</description>
  <repos>
     <repo url="smb://domain\\user:UserName@IP\\share" name="Default"/>
     <repo url="smb://domain\\user:UserName@IP\\another_share" name="Alternative"/>
  </repos>
  <packages>
    <package>
        <repo name="Default"/>
        <name>Dot Net 4.0</name>
        <file>dotNetFx40_Full_x86_x64.exe</file>
        <arguments>/passive</arguments>
    </package>
    <package>
        <repo name="Alternative"/>
        <name>Winrar</name>
        <file>winrarx64393.exe</file>
        <arguments>/s</arguments>
    </package>
  </packages>
</template>




